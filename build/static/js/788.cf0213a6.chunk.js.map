{"version":3,"file":"static/js/788.cf0213a6.chunk.js","mappings":"kKAGA,MA4BaA,EAAY,CACvBC,KA7BWC,EAAAA,GAAOC,QAAOC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0BACdC,EAAAA,EAAMC,QAAQC,yBA6BzBC,KA1BWP,EAAAA,GAAOQ,IAAGC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6LA2BrBO,MAbYV,EAAAA,GAAOQ,IAAGG,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,iHAMXC,EAAAA,EAAMQ,MAAMC,Q,0ECxBzB,MAoBaC,EAAiB,CAC5BC,UArBgBf,EAAAA,GAAOgB,KAAId,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iGAsB3Bc,aAfmBjB,EAAAA,GAAOkB,OAAMT,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,mLAElBC,EAAAA,EAAMQ,MAAMC,MAOfT,EAAAA,EAAMQ,MAAMO,Q,2CCnBzB,MAAMC,EAAgB,4BAETC,EAAoBC,KAC3BA,EAAMC,OAAS,IAAMH,EAAcI,KAAKF,I,wBCQ9C,MAsFA,EAtF0BG,IAAiD,IAAhD,aAAEC,GAAwCD,EAMnE,MAAM,SAAEE,IAAaC,EAAAA,EAAAA,MACf,cAAEC,IAAkBC,EAAAA,EAAAA,KACpBC,GAAWC,EAAAA,EAAAA,UAgBVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAmB,CACjDC,GAAI,CACFC,MAAO,GACPC,QAAS,MAEXC,SAAU,CACRF,MAAO,GACPC,QAAS,QAIPE,GAAsBC,EAAAA,EAAAA,cAAanB,IACvCY,GAAaQ,IAAQ,CACnBN,GAAI,CAAEC,MAAOf,EAAOgB,SAASK,EAAAA,EAAAA,GAAcrB,IAC3CiB,SAAUG,EAASH,YAClB,GACF,IAEGK,GAA4BH,EAAAA,EAAAA,cAAanB,IAC7CY,GAAaQ,IAAQ,CACnBN,GAAIM,EAASN,GACbG,SAAU,CAAEF,MAAOf,EAAOgB,QAASjB,EAAiBC,OACnD,GACF,IAEH,OACEuB,EAAAA,EAAAA,MAACC,EAAE/B,UAAS,CAACgC,SAxCMC,UACnBC,EAAEC,iBACGjB,EAASG,GAAGE,SAAYL,EAASM,SAASD,eAMzCT,EAAcsB,OAAO,CAAEC,MAAOnB,EAASG,GAAGC,MAAOE,SAAUN,EAASM,SAASF,QAC/ER,EAAcwB,WAChB1B,EAASD,IAPT4B,OAAOC,MACJtB,EAASG,GAAGE,QAA8B,uEAApB,8EAO3B,EA6BoCkB,SAAA,EAClCC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,KAAK,QACLvB,GAAE,GAAAwB,OAAK7B,EAAQ,OACf8B,SAAUrB,EACVF,QAASL,EAASG,GAAGE,QACrBwB,YAAY,sBACZC,UAAW,GACXC,UAAU,EACVC,eAAe,8FAEjBR,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,KAAK,WACLvB,GAAE,GAAAwB,OAAK7B,EAAQ,aACfO,QAASL,EAASM,SAASD,QAC3BuB,SAAUjB,EACVkB,YAAY,4BACZC,UAAW,GACXC,UAAU,EACVC,eAAe,8HACfC,mBAAmB,UAGrBT,EAAAA,EAAAA,KAACU,EAAAA,EAAO3D,IAAG,CACT4D,MAAO,CAAEC,QAAS,gBAClBC,SAAUC,EAAAA,EAAYC,YAAYF,SAClCG,WAAYF,EAAAA,EAAYC,YAAYC,WAAWjB,UAE/CC,EAAAA,EAAAA,KAACX,EAAE7B,aAAY,CAAAuC,UACbC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mCAGK,E,cCjFlB,MAmDA,EAnDiBkB,KAEf,MAAOC,IAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACxB,SAAElD,IAAaC,EAAAA,EAAAA,MAErBkD,EAAAA,EAAAA,YAAU,KACJH,GACFhD,EAASoD,EAAAA,EAAWC,KACtB,GAEC,IAGH,MAAMC,GAAWC,EAAAA,EAAAA,OACVxD,EAAcyD,IAAmBhD,EAAAA,EAAAA,UAAS4C,EAAAA,EAAWC,MAQ5D,OANAF,EAAAA,EAAAA,YAAU,KAAO,IAADM,EACsBC,EAAN,QAAlB,OAARJ,QAAQ,IAARA,GAAe,QAAPG,EAARH,EAAU5C,aAAK,IAAA+C,OAAP,EAARA,EAAiBE,OACnBH,EAAwB,OAARF,QAAQ,IAARA,GAAe,QAAPI,EAARJ,EAAU5C,aAAK,IAAAgD,OAAP,EAARA,EAAiBC,KACnC,GACC,CAAS,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAU5C,SAGZoB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAmB,CAAA/B,UAClBX,EAAAA,EAAAA,MAACC,EAAE/C,KAAI,CAAAyD,SAAA,EACLC,EAAAA,EAAAA,KAACX,EAAEvC,KAAI,CACLiF,QAASA,KACP7D,EAASoD,EAAAA,EAAWC,KAAK,EACzBxB,UAEFC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAAC7E,MAAOR,EAAAA,EAAMQ,MAAMC,WAG/B4C,EAAAA,EAAAA,KAACX,EAAEpC,MAAK,CAAA8C,UACNX,EAAAA,EAAAA,MAAA,MAAAW,SAAA,CAAI,wCAEFC,EAAAA,EAAAA,KAAA,SAAM,2FAENA,EAAAA,EAAAA,KAAA,SAAM,2HAENA,EAAAA,EAAAA,KAAA,SAAM,wIAKVA,EAAAA,EAAAA,KAACiC,EAAiB,CAAChE,aAAcA,QAEf,C","sources":["pages/JoinPage/JoinPage.styled.ts","components/join/CreateAccountForm/CreateAccountForm.styled.ts","utils/validatePassword.ts","components/join/CreateAccountForm/CreateAccountForm.tsx","pages/JoinPage/JoinPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from '../../styles/theme';\n\nconst Page = styled.section`\n  padding: ${theme.padding.BODY_WITH_BOTTOM_MARGIN};\n`;\n\nconst Logo = styled.div`\n  width: 182.5px;\n  height: 45px;\n  margin-top: 20px;\n  display: inline-block;\n  cursor: pointer;\n\n  & svg {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n`;\n\nconst Intro = styled.div`\n  padding: 30px 0 40px;\n\n  & h1 {\n    font-size: 16px;\n    font-weight: 500;\n    color: ${theme.color.BLACK};\n  }\n`;\n\nexport const PageStyle = {\n  Page,\n  Logo,\n  Intro\n};","import styled from 'styled-components';\nimport { theme } from '../../../styles/theme';\n\nconst Component = styled.form`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`;\n\nconst SubmitButton = styled.button`\n  padding: 20px 50px;\n  background: ${theme.color.BLACK};\n  border-radius: 32px;\n\n  & p {\n    text-align: center;\n    font-size: 16px;\n    font-weight: 700;\n    color: ${theme.color.WHITE};\n  }\n`;\n\nexport const ComponentStyle = {\n  Component,\n  SubmitButton,\n};\n","const passwordRegex = /^[a-zA-Z0-9!@#$%^&*]{6,}$/;\n\nexport const validatePassword = (input: string) => {\n  if (input.length < 6 || !passwordRegex.test(input)) return false;\n  return true;\n};\n","import { useCallback, useId, useState } from 'react';\nimport { ComponentStyle as S } from './CreateAccountForm.styled';\nimport { useRouter } from '../../../hooks/useRouter';\nimport { motion } from 'framer-motion';\nimport { motionStyle } from '../../../styles/motion';\nimport TextInput from '../../common/TextInput/TextInput';\nimport { validateEmail } from '../../../utils/validateEmail';\nimport { validatePassword } from '../../../utils/validatePassword';\nimport { FormData } from '../../../types/login';\nimport { useAuth } from '../../../hooks/auth/useAuth';\n\nconst CreateAccountForm = ({ redirectPath }: { redirectPath: string }) => {\n  /**\n   * 회원가입 Form 입니다.\n   * id, password 입력 후 유효성 검사를 하여 회원가입이 가능합니다.\n   */\n\n  const { navigate } = useRouter();\n  const { createAccount } = useAuth();\n  const uniqueId = useId();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!formData.id.isValid || !formData.password.isValid) {\n      window.alert(\n        !formData.id.isValid ? '이메일 주소를 확인해주세요.' : '패스워드를 확인해주세요.'\n      );\n      return;\n    }\n    await createAccount.mutate({ email: formData.id.state, password: formData.password.state });\n    if (createAccount.isSuccess) {\n      navigate(redirectPath);\n    }\n  };\n\n  const [formData, setFormData] = useState<FormData>({\n    id: {\n      state: '',\n      isValid: null,\n    },\n    password: {\n      state: '',\n      isValid: null,\n    },\n  });\n\n  const handleIdInputChange = useCallback((input: string) => {\n    setFormData((prevData) => ({\n      id: { state: input, isValid: validateEmail(input) },\n      password: prevData.password,\n    }));\n  }, []);\n\n  const handlePasswordInputChange = useCallback((input: string) => {\n    setFormData((prevData) => ({\n      id: prevData.id,\n      password: { state: input, isValid: validatePassword(input) },\n    }));\n  }, []);\n\n  return (\n    <S.Component onSubmit={handleSubmit}>\n      <TextInput\n        type=\"email\"\n        id={`${uniqueId}-id`}\n        onChange={handleIdInputChange}\n        isValid={formData.id.isValid}\n        placeholder=\"이메일*\"\n        maxLength={50}\n        required={true}\n        invalidMessage=\"잘못된 형식의 이메일 주소입니다.\"\n      />\n      <TextInput\n        type=\"password\"\n        id={`${uniqueId}-password`}\n        isValid={formData.password.isValid}\n        onChange={handlePasswordInputChange}\n        placeholder=\"패스워드*\"\n        maxLength={20}\n        required={true}\n        invalidMessage=\"영문, 숫자, 특수문자를 6자 이상 조합하여주세요.\"\n        fixedPaddingBottom=\"40px\"\n      />\n\n      <motion.div\n        style={{ display: 'inline-block' }}\n        whileTap={motionStyle.scaleButton.whileTap}\n        transition={motionStyle.scaleButton.transition}\n      >\n        <S.SubmitButton>\n          <p>회원가입</p>\n        </S.SubmitButton>\n      </motion.div>\n    </S.Component>\n  );\n};\n\nexport default CreateAccountForm;\n","import { PageStyle as S } from './JoinPage.styled';\nimport IconLogo from '../../components/icons/IconLogo';\nimport { theme } from '../../styles/theme';\nimport { useRecoilState } from 'recoil';\nimport { userState } from '../../recoil/auth';\nimport { useRouter } from '../../hooks/useRouter';\nimport { useEffect, useState } from 'react';\nimport { ROUTE_PATH } from '../../constants/path';\nimport { useLocation } from 'react-router-dom';\nimport CreateAccountForm from '../../components/join/CreateAccountForm/CreateAccountForm';\nimport CommonPageAnimation from '../../components/common/motion/CommonPageAnimation/CommonPageAnimation';\n\nconst JoinPage = () => {\n  // login 유저 redirect\n  const [user] = useRecoilState(userState);\n  const { navigate } = useRouter();\n\n  useEffect(() => {\n    if (user) {\n      navigate(ROUTE_PATH.root);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // 이전에 방문하려던 페이지 저장\n  const location = useLocation();\n  const [redirectPath, setRedirectPath] = useState(ROUTE_PATH.root);\n\n  useEffect(() => {\n    if (location?.state?.path !== null) {\n      setRedirectPath(location?.state?.path);\n    }\n  }, [location?.state]);\n\n  return (\n    <CommonPageAnimation>\n      <S.Page>\n        <S.Logo\n          onClick={() => {\n            navigate(ROUTE_PATH.root);\n          }}\n        >\n          <IconLogo color={theme.color.BLACK} />\n        </S.Logo>\n\n        <S.Intro>\n          <h1>\n            28CM 계정 만들기\n            <br />\n            포트폴리오 전용 웹사이트입니다.\n            <br />\n            웹사이트 내에 존재하는 모든 상품과 이벤트는\n            <br />\n            모두 존재하지 않는 허구인 점 참고 부탁드립니다.\n          </h1>\n        </S.Intro>\n\n        <CreateAccountForm redirectPath={redirectPath} />\n      </S.Page>\n    </CommonPageAnimation>\n  );\n};\n\nexport default JoinPage;\n"],"names":["PageStyle","Page","styled","section","_templateObject","_taggedTemplateLiteral","theme","padding","BODY_WITH_BOTTOM_MARGIN","Logo","div","_templateObject2","Intro","_templateObject3","color","BLACK","ComponentStyle","Component","form","SubmitButton","button","WHITE","passwordRegex","validatePassword","input","length","test","_ref","redirectPath","navigate","useRouter","createAccount","useAuth","uniqueId","useId","formData","setFormData","useState","id","state","isValid","password","handleIdInputChange","useCallback","prevData","validateEmail","handlePasswordInputChange","_jsxs","S","onSubmit","async","e","preventDefault","mutate","email","isSuccess","window","alert","children","_jsx","TextInput","type","concat","onChange","placeholder","maxLength","required","invalidMessage","fixedPaddingBottom","motion","style","display","whileTap","motionStyle","scaleButton","transition","JoinPage","user","useRecoilState","userState","useEffect","ROUTE_PATH","root","location","useLocation","setRedirectPath","_location$state","_location$state2","path","CommonPageAnimation","onClick","IconLogo","CreateAccountForm"],"sourceRoot":""}